# Part of the VexIR2Vec Project, under the AGPL V3.0 License. See the
# LICENSE file or <https://www.gnu.org/licenses/> for license information.

"""Used to derive the keyword"""


class Keywords:
    def __init__(self):
        self.keywords = {}
        self.addKeyword("PUT", "PUT")
        self.addKeyword("PUTI", "PUTI")
        self.addKeyword("GET", "GET")
        self.addKeyword("GETI", "GETI")
        self.addKeyword("ITE", "ITE")
        self.addKeyword("VECRET", "VECRET")
        self.addKeyword("GSPTR", "GSPTR")

        self.addKeyword("if-strict", "IF")
        self.addKeyword("if", "IF")
        self.addKeyword("else", "ELSE")
        self.addKeyword("ILGop_INVALID", "ILGop_INVALID")
        self.addKeyword("ILGop_IdentV128", "ILGop_IdentV")
        self.addKeyword("ILGop_Ident64", "ILGop_Ident")
        self.addKeyword("ILGop_Ident32", "ILGop_Ident")
        self.addKeyword("CASle", "CAS")
        self.addKeyword("CASbe", "CAS")
        self.addKeyword("DIRTY", "Dirty")
        self.addKeyword("IR-Fence", "Imbe_Fence")
        self.addKeyword("IR-CancelReservation", "Imbe_CancelReservation")
        for op in [
            "Boring",
            "Ijk_Boring",
            "Call",
            "Return",
            "ClientReq",
            "Yield",
            "EmWarn",
            "EmFail",
            "NoDecode",
            "MapFail",
            "InvalICache",
            "FlushDCache",
            "NoRedir",
            "SigILL",
            "SigTRAP",
            "SigSEGV",
            "SigBUS",
            "SigFPE",
            "SigFPE_IntDiv",
            "SigFPE_IntOvf",
            "Sys_syscall",
            "Sys_int32",
            "Sys_int128",
            "Sys_int129",
            "Sys_int130",
            "Sys_int145",
            "Sys_int210",
            "Sys_sysenter",
        ]:
            self.addKeyword(op, "JUMP_KIND")
        for op in ["LDle", "LDbe", "LDle-Linked", "LDbe-Linked"]:
            self.addKeyword(op, "LOAD")
        for op in ["STle", "STbe", "STle-Cond", "STbe-Cond"]:
            self.addKeyword(op, "STORE")

        for op in ["32to8", "64to16", "64to8", "32to1", "64to1"]:
            self.addKeyword(op, "Trunc")

        for op in [
            "1Uto8",
            "1Uto32",
            "1Uto64",
            "1Sto8",
            "1Sto16",
            "1Sto32",
            "1Sto64",
        ]:
            self.addKeyword(op, "Ext")

        for op in ["16HIto8", "32HIto16", "64HIto32", "128HIto64"]:
            self.addKeyword(op, "HTrunc")

        for op in ["16to8", "32to16", "64to32", "128to64"]:
            self.addKeyword(op, "Trunc")

        for op in ["8HLto16", "16HLto32", "32HLto64", "64HLto128"]:
            self.addKeyword(op, "HLExt")

        for op in ["F16toF64", "F16toF32", "F32toF64"]:
            self.addKeyword(op, "ExtF")

        for op in ["F64toF16", "F32toF16", "F64toF32"]:
            self.addKeyword(op, "TruncF")

        for op in ["F64toI64S", "F64toI64U", "F32toI32U"]:
            self.addKeyword(op, "ConvFI")

        for op in ["I32StoF64", "I32UtoF64"]:
            self.addKeyword(op, "ExtIF")

        for op in ["I64StoF64", "I64UtoF64", "I32UtoF32"]:
            self.addKeyword(op, "ConvIF")

        for op in ["RoundF128toInt", "RoundF64toInt", "RoundF32toInt"]:
            self.addKeyword(op, "RndFI")

        for op in ["F16toF32x4", "F16toF64x2"]:
            self.addKeyword(op, "ExtFV")

        for op in ["F32toF16x4_DEP", "F64toF16x2_DEP"]:
            self.addKeyword(op, "TruncFV_DEP")

        for op in [
            "TruncF128toI64S",
            "TruncF128toI32S",
            "TruncF128toI64U",
            "TruncF128toI32U",
            "F128toI32S",
            "F128toI64S",
            "F128toI32U",
            "F128toI64U",
            "F64toI16S",
            "F64toI32S",
            "F64toI32U",
        ]:
            self.addKeyword(op, "TruncFI")

        for op in ["I32StoF128", "I64StoF128", "I32UtoF128", "I64UtoF128"]:
            self.addKeyword(op, "ExtIF")

        for op in ["F32toF128", "F64toF128"]:
            self.addKeyword(op, "ExtF")

        for op in ["F128toF64", "F128toF32"]:
            self.addKeyword(op, "TruncF")

        self.addKeyword("I64UtoF32", "TruncIF")
        self.addKeyword("F128toI128U", "ConvFI")
        self.addKeyword("F32toI64U", "ExtFI")
        self.addKeyword("RndF128", "RndF")
        self.addKeyword("RoundF64toF32", "RndTruncF")
        self.addKeyword("F32toF16x4", "TruncFV")
        self.addKeyword("F64HLtoF128", "HLExtF")
        self.addKeyword("F128HItoF64", "HTruncF")
        self.addKeyword("F128LOtoF64", "LTruncF")

        for op in ["Add8", "Add16", "Add32", "Add64"]:
            self.addKeyword(op, "Add")

        for op in ["Sub8", "Sub16", "Sub32", "Sub64"]:
            self.addKeyword(op, "Sub")

        for op in ["Mul8", "Mul16", "Mul32", "Mul64"]:
            self.addKeyword(op, "Mul")

        for op in ["Mod8", "Mod16", "Mod32", "Mod64"]:
            self.addKeyword(op, "Mod")

        for op in ["Or1", "Or8", "Or16", "Or32", "Or64"]:
            self.addKeyword(op, "Or")

        for op in ["And1", "And8", "And16", "And32", "And64"]:
            self.addKeyword(op, "And")

        for op in ["Xor8", "Xor16", "Xor32", "Xor64"]:
            self.addKeyword(op, "Xor")

        for op in ["Shl8", "Shl16", "Shl32", "Shl64"]:
            self.addKeyword(op, "Shl")

        for op in ["Shr8", "Shr16", "Shr32", "Shr64"]:
            self.addKeyword(op, "Shr")

        for op in ["Sar8", "Sar16", "Sar32", "Sar64"]:
            self.addKeyword(op, "Sar")

        for op in ["CmpEQ8", "CmpEQ16", "CmpEQ32", "CmpEQ64"]:
            self.addKeyword(op, "CmpEQ")

        for op in ["CmpNE8", "CmpNE16", "CmpNE32", "CmpNE64"]:
            self.addKeyword(op, "CmpNE")

        for op in ["CasCmpEQ8", "CasCmpEQ16", "CasCmpEQ32", "CasCmpEQ64"]:
            self.addKeyword(op, "CasCmpEQ")

        for op in ["CasCmpNE8", "CasCmpNE16", "CasCmpNE32", "CasCmpNE64"]:
            self.addKeyword(op, "CasCmpNE")

        for op in ["ExpCmpNE8", "ExpCmpNE16", "ExpCmpNE32", "ExpCmpNE64"]:
            self.addKeyword(op, "ExpCmpNE")

        for op in ["Not1", "Not8", "Not16", "Not32", "Not64"]:
            self.addKeyword(op, "Not")

        for op in [
            "8Uto16",
            "8Uto32",
            "16Uto32",
            "8Sto16",
            "8Sto32",
            "16Sto32",
            "32Sto64",
            "32Uto64",
            "16Uto64",
            "16Sto64",
            "8Uto64",
            "8Sto64",
        ]:
            self.addKeyword(op, "Ext")

        for op in [
            "MullS8",
            "MullS16",
            "MullS32",
            "MullS64",
            "MullU8",
            "MullU16",
            "MullU32",
            "MullU64",
        ]:
            self.addKeyword(op, "Mull")

        for op in ["Clz64", "Clz32"]:
            self.addKeyword(op, "Clz")

        for op in ["Ctz64", "Ctz32"]:
            self.addKeyword(op, "Ctz")

        for op in ["ClzNat64", "ClzNat32"]:
            self.addKeyword(op, "ClzNat")

        for op in ["CtzNat64", "CtzNat32"]:
            self.addKeyword(op, "CtzNat")

        for op in ["PopCount64", "PopCount32"]:
            self.addKeyword(op, "PopCount")

        for op in ["CmpLT32S", "CmpLT32U", "CmpLT64S", "CmpLT64U"]:
            self.addKeyword(op, "CmpLT")

        for op in ["CmpLE32S", "CmpLE32U", "CmpLE64S", "CmpLE64U"]:
            self.addKeyword(op, "CmpLE")

        for op in ["CmpNEZ8", "CmpNEZ16", "CmpNEZ32", "CmpNEZ64"]:
            self.addKeyword(op, "CmpNEZ")

        for op in ["CmpwNEZ32", "CmpwNEZ64"]:
            self.addKeyword(op, "CmpwNEZ")

        for op in ["Left8", "Left16", "Left32", "Left64"]:
            self.addKeyword(op, "Left")

        self.addKeyword("Max32U", "Max")

        for op in ["CmpORD32U", "CmpORD32S", "CmpORD64U", "CmpORD64S"]:
            self.addKeyword(op, "CmpORD")

        for op in [
            "DivU8",
            "DivU16",
            "DivU32",
            "DivU64",
            "DivS8",
            "DivS16",
            "DivS32",
            "DivS64",
            "DivU64E",
            "DivS64E",
            "DivU32E",
            "DivS32E",
            "DivU16E",
            "DivS16E",
            "DivU8E",
            "DivS8E",
        ]:
            self.addKeyword(op, "Div")

        for op in [
            "DivModU64to32",
            "DivModS64to32",
            "DivModU32to32",
            "DivModS32to32",
            "DivModU128to64",
            "DivModS128to64",
            "DivModS64to64",
            "DivModU64to64",
        ]:
            self.addKeyword(op, "DivMod")

        self.addKeyword("CmpF32", "CmpF")
        self.addKeyword("F32toI32S", "ConvFI")
        self.addKeyword("F32toI64S", "ConvFI")
        self.addKeyword("I32StoF32", "ConvIF")
        self.addKeyword("I64StoF32", "ConvIF")
        self.addKeyword("AddF64", "AddF")
        self.addKeyword("SubF64", "SubF")
        self.addKeyword("MulF64", "MulF")
        self.addKeyword("DivF64", "DivF")
        self.addKeyword("AddF64r32", "AddF")
        self.addKeyword("SubF64r32", "SubF")
        self.addKeyword("MulF64r32", "MulF")
        self.addKeyword("DivF64r32", "DivF")
        self.addKeyword("AddF32", "AddF")
        self.addKeyword("SubF32", "SubF")
        self.addKeyword("MulF32", "MulF")
        self.addKeyword("DivF32", "DivF")
        self.addKeyword("AddF128", "AddF")
        self.addKeyword("SubF128", "SubF")
        self.addKeyword("MulF128", "MulF")
        self.addKeyword("DivF128", "DivF")
        self.addKeyword("TruncF128toI64S", "TruncFI")
        self.addKeyword("TruncF128toI32S", "TruncFI")
        self.addKeyword("TruncF128toI64U", "TruncFI")
        self.addKeyword("TruncF128toI32U", "TruncFI")
        self.addKeyword("MAddF128", "MAddF")
        self.addKeyword("MSubF128", "MSubF")
        self.addKeyword("NegMAddF128", "NegMAddF")
        self.addKeyword("NegMSubF128", "NegMSubF")
        self.addKeyword("AbsF128", "AbsF")
        self.addKeyword("NegF128", "NegF")
        self.addKeyword("SqrtF128", "SqrtF")
        self.addKeyword("CmpF128", "CmpF")
        self.addKeyword("F64HLtoF128", "HLExtF")
        self.addKeyword("F128HItoF64", "HTruncF")
        self.addKeyword("F128LOtoF64", "LTruncF")
        self.addKeyword("I32StoF128", "ExtIF")
        self.addKeyword("I64StoF128", "ExtIF")
        self.addKeyword("I32UtoF128", "ExtIF")
        self.addKeyword("I64UtoF128", "ExtIF")
        self.addKeyword("F128toI32S", "TruncFI")
        self.addKeyword("F128toI64S", "TruncFI")
        self.addKeyword("F128toI32U", "TruncFI")
        self.addKeyword("F128toI64U", "TruncFI")
        self.addKeyword("F32toF128", "ExtF")
        self.addKeyword("F64toF128", "ExtF")
        self.addKeyword("F128toF64", "TruncF")
        self.addKeyword("F128toF32", "TruncF")
        self.addKeyword("F128toI128S", "ConvFI")
        self.addKeyword("RndF128", "RndF")
        self.addKeyword("MAddF32", "MAddF")
        self.addKeyword("MSubF32", "MSubF")
        self.addKeyword("ScaleF64", "ScaleF")
        self.addKeyword("AtanF64", "AtanF")
        self.addKeyword("Yl2xF64", "Yl2xF")
        self.addKeyword("Yl2xp1F64", "Yl2xp1F")
        self.addKeyword("PRemF64", "PRemF")
        self.addKeyword("PRemC3210F64", "PRemC3210F")
        self.addKeyword("PRem1F64", "PRem1F")
        self.addKeyword("PRem1C3210F64", "PRem1C3210F")
        self.addKeyword("NegF64", "NegF")
        self.addKeyword("AbsF64", "AbsF")
        self.addKeyword("NegF32", "NegF")
        self.addKeyword("AbsF32", "AbsF")
        self.addKeyword("SqrtF64", "SqrtF")
        self.addKeyword("SqrtF32", "SqrtF")
        self.addKeyword("SinF64", "SinF")
        self.addKeyword("CosF64", "CosF")
        self.addKeyword("TanF64", "TanF")
        self.addKeyword("2xm1F64", "2xm1F")
        self.addKeyword("MAddF64", "MAddF")
        self.addKeyword("MSubF64", "MSubF")
        self.addKeyword("MAddF64r32", "MAddF")
        self.addKeyword("MSubF64r32", "MSubF")
        self.addKeyword("RSqrtEst5GoodF64", "RSqrtEst5GoodF")
        self.addKeyword("RoundF64toF64_NEAREST", "RndF")
        self.addKeyword("RoundF64toF64_NegINF", "RndF")
        self.addKeyword("RoundF64toF64_PosINF", "RndF")
        self.addKeyword("RoundF64toF64_ZERO", "RndF")
        self.addKeyword("TruncF64asF32", "TruncF")
        self.addKeyword("RecpExpF64", "RecpExpF")
        self.addKeyword("RecpExpF32", "RecpExpF")
        self.addKeyword("MaxNumF64", "MaxNumF")
        self.addKeyword("MinNumF64", "MinNumF")
        self.addKeyword("MaxNumF32", "MaxNumF")
        self.addKeyword("MinNumF32", "MinNumF")
        self.addKeyword("F16toF64", "ExtF")
        self.addKeyword("F64toF16", "TruncF")
        self.addKeyword("F16toF32", "ExtF")
        self.addKeyword("F32toF16", "TruncF")
        self.addKeyword("QAdd32S", "QAddV")
        self.addKeyword("QSub32S", "QSubV")
        self.addKeyword("Add16x2", "AddV")
        self.addKeyword("Sub16x2", "SubV")
        self.addKeyword("QAdd16Sx2", "QAddV")
        self.addKeyword("QAdd16Ux2", "QAddV")
        self.addKeyword("QSub16Sx2", "QSubV")
        self.addKeyword("QSub16Ux2", "QSubV")
        self.addKeyword("HAdd16Ux2", "HAddV")
        self.addKeyword("HAdd16Sx2", "HAddV")
        self.addKeyword("HSub16Ux2", "HSubV")
        self.addKeyword("HSub16Sx2", "HSubV")
        self.addKeyword("Add8x4", "AddV")
        self.addKeyword("Sub8x4", "SubV")
        self.addKeyword("QAdd8Sx4", "QAddV")
        self.addKeyword("QAdd8Ux4", "QAddV")
        self.addKeyword("QSub8Sx4", "QSubV")
        self.addKeyword("QSub8Ux4", "QSubV")
        self.addKeyword("HAdd8Ux4", "HAddV")
        self.addKeyword("HAdd8Sx4", "HAddV")
        self.addKeyword("HSub8Ux4", "HSubV")
        self.addKeyword("HSub8Sx4", "HSubV")
        self.addKeyword("Sad8Ux4", "SadV")
        self.addKeyword("CmpNEZ16x2", "CmpNEZV")
        self.addKeyword("CmpNEZ8x4", "CmpNEZV")
        self.addKeyword("Reverse8sIn32_x1", "ReverseChunks")
        self.addKeyword("CmpF64", "CmpF")
        self.addKeyword("F64toI16S", "TruncFI")
        self.addKeyword("F64toI32S", "TruncFI")
        self.addKeyword("F64toI64S", "ConvFI")
        self.addKeyword("F64toI64U", "ConvFI")
        self.addKeyword("F32toI32U", "ConvFI")
        self.addKeyword("F32toI64U", "ExtFI")
        self.addKeyword("F64toI32U", "TruncFI")
        self.addKeyword("I32StoF64", "ExtIF")
        self.addKeyword("I64StoF64", "ConvIF")
        self.addKeyword("I64UtoF64", "ConvIF")
        self.addKeyword("I32UtoF32", "ConvIF")
        self.addKeyword("I64UtoF32", "TruncIF")
        self.addKeyword("I32UtoF64", "ExtIF")
        self.addKeyword("F32toF64", "ExtF")
        self.addKeyword("F64toF32", "TruncF")
        self.addKeyword("RoundF128toInt", "RndFI")
        self.addKeyword("RoundF64toInt", "RndFI")
        self.addKeyword("RoundF32toInt", "RndFI")
        self.addKeyword("RoundF64toF32", "RndTruncF")
        self.addKeyword("ReinterpF64asI64", "ReinterpFI")
        self.addKeyword("ReinterpI64asF64", "ReinterpIF")
        self.addKeyword("ReinterpF32asI32", "ReinterpFI")
        self.addKeyword("ReinterpI32asF32", "ReinterpIF")
        self.addKeyword("I32UtoF32x4_DEP", "ConvIFV_DEP")
        self.addKeyword("I32StoF32x4_DEP", "ConvIFV_DEP")
        self.addKeyword("I32StoF32x4", "ConvIF")
        self.addKeyword("F32toI32Sx4", "ConvFI")
        self.addKeyword("F32toF16x4_DEP", "TruncFV_DEP")
        self.addKeyword("F32toF16x4", "TruncFV")
        self.addKeyword("F16toF32x4", "ExtFV")
        self.addKeyword("F16toF64x2", "ExtFV")
        self.addKeyword("F64toF16x2_DEP", "TruncFV_DEP")
        self.addKeyword("RSqrtEst32Fx4", "RSqrtEstFV")
        self.addKeyword("RSqrtEst32Ux4", "RSqrtEstV")
        self.addKeyword("RSqrtEst32Fx2", "RSqrtEstFV")
        self.addKeyword("RSqrtEst32Ux2", "RSqrtEstV")
        self.addKeyword("QF32toI32Ux4_RZ", "QConvFIV")
        self.addKeyword("QF32toI32Sx4_RZ", "QConvFIV")
        self.addKeyword("F32toI32Ux4_RZ", "ConvFIV")
        self.addKeyword("F32toI32Sx4_RZ", "ConvFIV")
        self.addKeyword("I32UtoF32x2_DEP", "ConvIFV_DEP")
        self.addKeyword("I32StoF32x2_DEP", "ConvIFV_DEP")
        self.addKeyword("F32toI32Ux2_RZ", "ConvFIV")
        self.addKeyword("F32toI32Sx2_RZ", "ConvFIV")
        self.addKeyword("RoundF32x4_RM", "RndFV")
        self.addKeyword("RoundF32x4_RP", "RndFV")
        self.addKeyword("RoundF32x4_RN", "RndFV")
        self.addKeyword("RoundF32x4_RZ", "RndFV")
        self.addKeyword("Abs8x8", "AbsV")
        self.addKeyword("Abs16x4", "AbsV")
        self.addKeyword("Abs32x2", "AbsV")
        self.addKeyword("Add8x8", "AddV")
        self.addKeyword("Add16x4", "AddV")
        self.addKeyword("Add32x2", "AddV")
        self.addKeyword("QAdd8Ux8", "QAddV")
        self.addKeyword("QAdd16Ux4", "QAddV")
        self.addKeyword("QAdd32Ux2", "QAddV")
        self.addKeyword("QAdd64Ux1", "QAddV")
        self.addKeyword("QAdd8Sx8", "QAddV")
        self.addKeyword("QAdd16Sx4", "QAddV")
        self.addKeyword("QAdd32Sx2", "QAddV")
        self.addKeyword("QAdd64Sx1", "QAddV")
        self.addKeyword("PwAdd8x8", "PwAddV")
        self.addKeyword("PwAdd16x4", "PwAddV")
        self.addKeyword("PwAdd32x2", "PwAddV")
        self.addKeyword("PwAdd32Fx2", "PwAddV")
        self.addKeyword("PwAddL8Ux8", "PwAddLV")
        self.addKeyword("PwAddL16Ux4", "PwAddLV")
        self.addKeyword("PwAddL32Ux2", "PwAddLV")
        self.addKeyword("PwAddL8Sx8", "PwAddLV")
        self.addKeyword("PwAddL16Sx4", "PwAddLV")
        self.addKeyword("PwAddL32Sx2", "PwAddLV")
        self.addKeyword("Sub8x8", "SubV")
        self.addKeyword("Sub16x4", "SubV")
        self.addKeyword("Sub32x2", "SubV")
        self.addKeyword("QSub8Ux8", "QSubV")
        self.addKeyword("QSub16Ux4", "QSubV")
        self.addKeyword("QSub32Ux2", "QSubV")
        self.addKeyword("QSub64Ux1", "QSubV")
        self.addKeyword("QSub8Sx8", "QSubV")
        self.addKeyword("QSub16Sx4", "QSubV")
        self.addKeyword("QSub32Sx2", "QSubV")
        self.addKeyword("QSub64Sx1", "QSubV")
        self.addKeyword("Mul8x8", "MulV")
        self.addKeyword("Mul16x4", "MulV")
        self.addKeyword("Mul32x2", "MulV")
        self.addKeyword("Mul32Fx2", "MulV")
        self.addKeyword("PolynomialMul8x8", "PolynomialMulV")
        self.addKeyword("MulHi16Ux4", "MulHiV")
        self.addKeyword("MulHi16Sx4", "MulHiV")
        self.addKeyword("QDMulHi16Sx4", "QDMulHiV")
        self.addKeyword("QDMulHi32Sx2", "QDMulHiV")
        self.addKeyword("QRDMulHi16Sx4", "QRDMulHiV")
        self.addKeyword("QRDMulHi32Sx2", "QRDMulHiV")
        self.addKeyword("QDMull16Sx4", "QDMullV")
        self.addKeyword("QDMull32Sx2", "QDMullV")
        self.addKeyword("Avg8Ux8", "AvgV")
        self.addKeyword("Avg16Ux4", "AvgV")
        self.addKeyword("Max8Sx8", "MaxV")
        self.addKeyword("Max16Sx4", "MaxV")
        self.addKeyword("Max32Sx2", "MaxV")
        self.addKeyword("Max8Ux8", "MaxV")
        self.addKeyword("Max16Ux4", "MaxV")
        self.addKeyword("Max32Ux2", "MaxV")
        self.addKeyword("Min8Sx8", "MinV")
        self.addKeyword("Min16Sx4", "MinV")
        self.addKeyword("Min32Sx2", "MinV")
        self.addKeyword("Min8Ux8", "MinV")
        self.addKeyword("Min16Ux4", "MinV")
        self.addKeyword("Min32Ux2", "MinV")
        self.addKeyword("PwMax8Sx8", "PwMaxV")
        self.addKeyword("PwMax16Sx4", "PwMaxV")
        self.addKeyword("PwMax32Sx2", "PwMaxV")
        self.addKeyword("PwMax8Ux8", "PwMaxV")
        self.addKeyword("PwMax16Ux4", "PwMaxV")
        self.addKeyword("PwMax32Ux2", "PwMaxV")
        self.addKeyword("PwMin8Sx8", "PwMinV")
        self.addKeyword("PwMin16Sx4", "PwMinV")
        self.addKeyword("PwMin32Sx2", "PwMinV")
        self.addKeyword("PwMin8Ux8", "PwMinV")
        self.addKeyword("PwMin16Ux4", "PwMinV")
        self.addKeyword("PwMin32Ux2", "PwMinV")
        self.addKeyword("CmpEQ8x8", "CmpEQV")
        self.addKeyword("CmpEQ16x4", "CmpEQV")
        self.addKeyword("CmpEQ32x2", "CmpEQV")
        self.addKeyword("CmpGT8Ux8", "CmpGTV")
        self.addKeyword("CmpGT16Ux4", "CmpGTV")
        self.addKeyword("CmpGT32Ux2", "CmpGTV")
        self.addKeyword("CmpGT8Sx8", "CmpGTV")
        self.addKeyword("CmpGT16Sx4", "CmpGTV")
        self.addKeyword("CmpGT32Sx2", "CmpGTV")
        self.addKeyword("Cnt8x8", "CntV")
        self.addKeyword("Clz8x8", "ClzV")
        self.addKeyword("Clz16x4", "ClzV")
        self.addKeyword("Clz32x2", "ClzV")
        self.addKeyword("Cls8x8", "ClsV")
        self.addKeyword("Cls16x4", "ClsV")
        self.addKeyword("Cls32x2", "ClsV")
        self.addKeyword("ShlN8x8", "ShlNV")
        self.addKeyword("ShlN16x4", "ShlNV")
        self.addKeyword("ShlN32x2", "ShlNV")
        self.addKeyword("ShrN8x8", "ShrNV")
        self.addKeyword("ShrN16x4", "ShrNV")
        self.addKeyword("ShrN32x2", "ShrNV")
        self.addKeyword("SarN8x8", "SarNV")
        self.addKeyword("SarN16x4", "SarNV")
        self.addKeyword("SarN32x2", "SarNV")
        self.addKeyword("QNarrowBin16Sto8Ux8", "QNarrowBin")
        self.addKeyword("QNarrowBin16Sto8Sx8", "QNarrowBin")
        self.addKeyword("QNarrowBin32Sto16Sx4", "QNarrowBin")
        self.addKeyword("QNarrowBin64Sto32Sx4", "QNarrowBin")
        self.addKeyword("QNarrowBin64Uto32Ux4", "QNarrowBin")
        self.addKeyword("NarrowBin16to8x8", "NarrowBin")
        self.addKeyword("NarrowBin32to16x4", "NarrowBin")
        self.addKeyword("NarrowBin64to32x4", "NarrowBin")
        self.addKeyword("InterleaveHI8x8", "HInterleaveV")
        self.addKeyword("InterleaveHI16x4", "HInterleaveV")
        self.addKeyword("InterleaveHI32x2", "HInterleaveV")
        self.addKeyword("InterleaveLO8x8", "LInterleaveV")
        self.addKeyword("InterleaveLO16x4", "LInterleaveV")
        self.addKeyword("InterleaveLO32x2", "LInterleaveV")
        self.addKeyword("CatOddLanes8x8", "CatOddLanesV")
        self.addKeyword("CatOddLanes16x4", "CatOddLanesV")
        self.addKeyword("CatEvenLanes8x8", "CatEvenLanesV")
        self.addKeyword("CatEvenLanes16x4", "CatEvenLanesV")
        self.addKeyword("InterleaveOddLanes8x8", "InterleaveOddLanesV")
        self.addKeyword("InterleaveOddLanes16x4", "InterleaveOddLanesV")
        self.addKeyword("InterleaveEvenLanes8x8", "InterleaveEvenLanesV")
        self.addKeyword("InterleaveEvenLanes16x4", "InterleaveEvenLanesV")
        self.addKeyword("Shl8x8", "ShlV")
        self.addKeyword("Shl16x4", "ShlV")
        self.addKeyword("Shl32x2", "ShlV")
        self.addKeyword("Shr8x8", "ShrV")
        self.addKeyword("Shr16x4", "ShrV")
        self.addKeyword("Shr32x2", "ShrV")
        self.addKeyword("QShl8x8", "QShlV")
        self.addKeyword("QShl16x4", "QShlV")
        self.addKeyword("QShl32x2", "QShlV")
        self.addKeyword("QShl64x1", "QShlV")
        self.addKeyword("QSal8x8", "QSalV")
        self.addKeyword("QSal16x4", "QSalV")
        self.addKeyword("QSal32x2", "QSalV")
        self.addKeyword("QSal64x1", "QSalV")
        self.addKeyword("QShlNsatUU8x8", "QShlNsatV")
        self.addKeyword("QShlNsatUU16x4", "QShlNsatV")
        self.addKeyword("QShlNsatUU32x2", "QShlNsatV")
        self.addKeyword("QShlNsatUU64x1", "QShlNsatV")
        self.addKeyword("QShlNsatSU8x8", "QShlNsatV")
        self.addKeyword("QShlNsatSU16x4", "QShlNsatV")
        self.addKeyword("QShlNsatSU32x2", "QShlNsatV")
        self.addKeyword("QShlNsatSU64x1", "QShlNsatV")
        self.addKeyword("QShlNsatSS8x8", "QShlNsatV")
        self.addKeyword("QShlNsatSS16x4", "QShlNsatV")
        self.addKeyword("QShlNsatSS32x2", "QShlNsatV")
        self.addKeyword("QShlNsatSS64x1", "QShlNsatV")
        self.addKeyword("Sar8x8", "SarV")
        self.addKeyword("Sar16x4", "SarV")
        self.addKeyword("Sar32x2", "SarV")
        self.addKeyword("Sal8x8", "SalV")
        self.addKeyword("Sal16x4", "SalV")
        self.addKeyword("Sal32x2", "SalV")
        self.addKeyword("Sal64x1", "SalV")
        self.addKeyword("Perm8x8", "PermV")
        self.addKeyword("PermOrZero8x8", "PermOrZeroV")
        self.addKeyword("Reverse8sIn16_x4", "ReverseChunks")
        self.addKeyword("Reverse8sIn32_x2", "ReverseChunks")
        self.addKeyword("Reverse16sIn32_x2", "ReverseChunks")
        self.addKeyword("Reverse8sIn64_x1", "ReverseChunks")
        self.addKeyword("Reverse16sIn64_x1", "ReverseChunks")
        self.addKeyword("Reverse32sIn64_x1", "ReverseChunks")
        self.addKeyword("Abs32Fx2", "AbsFV")
        self.addKeyword("GetMSBs8x8", "GetMSBsV")
        self.addKeyword("GetMSBs8x16", "GetMSBsV")
        self.addKeyword("CmpNEZ32x2", "CmpNEZV")
        self.addKeyword("CmpNEZ16x4", "CmpNEZV")
        self.addKeyword("CmpNEZ8x8", "CmpNEZV")
        self.addKeyword("Add32Fx4", "AddFV")
        self.addKeyword("Add32Fx2", "AddFV")
        self.addKeyword("Add32F0x4", "AddFV")
        self.addKeyword("Add64Fx2", "AddFV")
        self.addKeyword("Add64F0x2", "AddFV")
        self.addKeyword("Div32Fx4", "DivFV")
        self.addKeyword("Div32F0x4", "DivFV")
        self.addKeyword("Div64Fx2", "DivFV")
        self.addKeyword("Div64F0x2", "DivFV")
        self.addKeyword("Max32Fx8", "MaxFV")
        self.addKeyword("Max32Fx4", "MaxFV")
        self.addKeyword("Max32Fx2", "MaxFV")
        self.addKeyword("PwMax32Fx4", "PwMaxFV")
        self.addKeyword("PwMax32Fx2", "PwMaxFV")
        self.addKeyword("Max32F0x4", "MaxFV")
        self.addKeyword("Max64Fx4", "MaxFV")
        self.addKeyword("Max64Fx2", "MaxFV")
        self.addKeyword("Max64F0x2", "MaxFV")
        self.addKeyword("Min32Fx8", "MinFV")
        self.addKeyword("Min32Fx4", "MinFV")
        self.addKeyword("Min32Fx2", "MinFV")
        self.addKeyword("PwMin32Fx4", "PwMinFV")
        self.addKeyword("PwMin32Fx2", "PwMinFV")
        self.addKeyword("Min32F0x4", "MinFV")
        self.addKeyword("Min64Fx4", "MinFV")
        self.addKeyword("Min64Fx2", "MinFV")
        self.addKeyword("Min64F0x2", "MinFV")
        self.addKeyword("Mul32Fx4", "MulFV")
        self.addKeyword("Mul32F0x4", "MulFV")
        self.addKeyword("Mul64Fx2", "MulFV")
        self.addKeyword("Mul64F0x2", "MulFV")
        self.addKeyword("RecipEst32Ux2", "RecipEstV")
        self.addKeyword("RecipEst32Fx2", "RecipEstFV")
        self.addKeyword("RecipEst32Fx4", "RecipEstFV")
        self.addKeyword("RecipEst32Fx8", "RecipEstFV")
        self.addKeyword("RecipEst32Ux4", "RecipEstV")
        self.addKeyword("RecipEst32F0x4", "RecipEstFV")
        self.addKeyword("RecipStep32Fx2", "RecipStepFV")
        self.addKeyword("RecipStep32Fx4", "RecipStepFV")
        self.addKeyword("RecipEst64Fx2", "RecipEstFV")
        self.addKeyword("RecipStep64Fx2", "RecipStepFV")
        self.addKeyword("Abs32Fx4", "AbsFV")
        self.addKeyword("Abs64Fx2", "AbsFV")
        self.addKeyword("RSqrtStep32Fx4", "RSqrtStepFV")
        self.addKeyword("RSqrtStep64Fx2", "RSqrtStepFV")
        self.addKeyword("RSqrtStep32Fx2", "RSqrtStepFV")
        self.addKeyword("RSqrtEst64Fx2", "RSqrtEstFV")
        self.addKeyword("RSqrtEst32F0x4", "RSqrtEstFV")
        self.addKeyword("RSqrtEst32Fx8", "RSqrtEstFV")
        self.addKeyword("Sqrt32Fx4", "SqrtFV")
        self.addKeyword("Sqrt32F0x4", "SqrtFV")
        self.addKeyword("Sqrt64Fx2", "SqrtFV")
        self.addKeyword("Sqrt64F0x2", "SqrtFV")
        self.addKeyword("Sqrt32Fx8", "SqrtFV")
        self.addKeyword("Sqrt64Fx4", "SqrtFV")
        self.addKeyword("Scale2_32Fx4", "Scale2_FV")
        self.addKeyword("Scale2_64Fx2", "Scale2_FV")
        self.addKeyword("Log2_32Fx4", "Log2_FV")
        self.addKeyword("Log2_64Fx2", "Log2_FV")
        self.addKeyword("Exp2_32Fx4", "Exp2_FV")
        self.addKeyword("Sub32Fx4", "SubFV")
        self.addKeyword("Sub32Fx2", "SubFV")
        self.addKeyword("Sub32F0x4", "SubFV")
        self.addKeyword("Sub64Fx2", "SubFV")
        self.addKeyword("Sub64F0x2", "SubFV")
        self.addKeyword("CmpEQ32Fx4", "CmpEQFV")
        self.addKeyword("CmpLT32Fx4", "CmpLTFV")
        self.addKeyword("CmpLE32Fx4", "CmpLEFV")
        self.addKeyword("CmpGT32Fx4", "CmpGTFV")
        self.addKeyword("CmpGE32Fx4", "CmpGEFV")
        self.addKeyword("CmpUN32Fx4", "CmpUNFV")
        self.addKeyword("CmpEQ64Fx2", "CmpEQFV")
        self.addKeyword("CmpLT64Fx2", "CmpLTFV")
        self.addKeyword("CmpLE64Fx2", "CmpLEFV")
        self.addKeyword("CmpUN64Fx2", "CmpUNFV")
        self.addKeyword("CmpGT32Fx2", "CmpGTFV")
        self.addKeyword("CmpEQ32Fx2", "CmpEQFV")
        self.addKeyword("CmpGE32Fx2", "CmpGEFV")
        self.addKeyword("CmpEQ32F0x4", "CmpEQFV")
        self.addKeyword("CmpLT32F0x4", "CmpLTFV")
        self.addKeyword("CmpLE32F0x4", "CmpLEFV")
        self.addKeyword("CmpUN32F0x4", "CmpUNFV")
        self.addKeyword("CmpEQ64F0x2", "CmpEQFV")
        self.addKeyword("CmpLT64F0x2", "CmpLTFV")
        self.addKeyword("CmpLE64F0x2", "CmpLEFV")
        self.addKeyword("CmpUN64F0x2", "CmpUNFV")
        self.addKeyword("Neg64Fx2", "NegFV")
        self.addKeyword("Neg32Fx4", "NegFV")
        self.addKeyword("Neg32Fx2", "NegFV")
        self.addKeyword("F32x4_2toQ16x8", "ConvFQ")
        self.addKeyword("F64x2_2toQ32x4", "ConvFQ")
        self.addKeyword("V128to64", "TruncV")
        self.addKeyword("V128HIto64", "HTruncV")
        self.addKeyword("64HLtoV128", "HLExtV")
        self.addKeyword("64UtoV128", "ExtV")
        self.addKeyword("SetV128lo64", "SetVlo")
        self.addKeyword("ZeroHI64ofV128", "ZeroHV")
        self.addKeyword("ZeroHI96ofV128", "ZeroHV")
        self.addKeyword("ZeroHI112ofV128", "ZeroHV")
        self.addKeyword("ZeroHI120ofV128", "ZeroHV")
        self.addKeyword("32UtoV128", "ExtV")
        self.addKeyword("V128to32", "TruncV")
        self.addKeyword("SetV128lo32", "SetVlo")
        self.addKeyword("Dup8x16", "DupV")
        self.addKeyword("Dup16x8", "DupV")
        self.addKeyword("Dup32x4", "DupV")
        self.addKeyword("Dup8x8", "DupV")
        self.addKeyword("Dup16x4", "DupV")
        self.addKeyword("Dup32x2", "DupV")
        self.addKeyword("NotV128", "NotV")
        self.addKeyword("AndV128", "AndV")
        self.addKeyword("OrV128", "OrV")
        self.addKeyword("XorV128", "XorV")
        self.addKeyword("CmpNEZ8x16", "CmpNEZV")
        self.addKeyword("CmpNEZ16x8", "CmpNEZV")
        self.addKeyword("CmpNEZ32x4", "CmpNEZV")
        self.addKeyword("CmpNEZ64x2", "CmpNEZV")
        self.addKeyword("CmpNEZ128x1", "CmpNEZV")
        self.addKeyword("Abs8x16", "AbsV")
        self.addKeyword("Abs16x8", "AbsV")
        self.addKeyword("Abs32x4", "AbsV")
        self.addKeyword("Abs64x2", "AbsV")
        self.addKeyword("Add8x16", "AddV")
        self.addKeyword("Add16x8", "AddV")
        self.addKeyword("Add32x4", "AddV")
        self.addKeyword("Add64x2", "AddV")
        self.addKeyword("Add128x1", "AddV")
        self.addKeyword("QAdd8Ux16", "QAddV")
        self.addKeyword("QAdd16Ux8", "QAddV")
        self.addKeyword("QAdd32Ux4", "QAddV")
        self.addKeyword("QAdd8Sx16", "QAddV")
        self.addKeyword("QAdd16Sx8", "QAddV")
        self.addKeyword("QAdd32Sx4", "QAddV")
        self.addKeyword("QAdd64Ux2", "QAddV")
        self.addKeyword("QAdd64Sx2", "QAddV")
        self.addKeyword("QAddExtUSsatSS8x16", "QAddExtsat")
        self.addKeyword("QAddExtUSsatSS16x8", "QAddExtsat")
        self.addKeyword("QAddExtUSsatSS32x4", "QAddExtsat")
        self.addKeyword("QAddExtUSsatSS64x2", "QAddExtsat")
        self.addKeyword("QAddExtSUsatUU8x16", "QAddExtsat")
        self.addKeyword("QAddExtSUsatUU16x8", "QAddExtsat")
        self.addKeyword("QAddExtSUsatUU32x4", "QAddExtsat")
        self.addKeyword("QAddExtSUsatUU64x2", "QAddExtsat")
        self.addKeyword("PwAdd8x16", "PwAddV")
        self.addKeyword("PwAdd16x8", "PwAddV")
        self.addKeyword("PwAdd32x4", "PwAddV")
        self.addKeyword("PwAddL8Ux16", "PwAddLV")
        self.addKeyword("PwAddL16Ux8", "PwAddLV")
        self.addKeyword("PwAddL32Ux4", "PwAddLV")
        self.addKeyword("PwAddL64Ux2", "PwAddLV")
        self.addKeyword("PwAddL8Sx16", "PwAddLV")
        self.addKeyword("PwAddL16Sx8", "PwAddLV")
        self.addKeyword("PwAddL32Sx4", "PwAddLV")
        self.addKeyword("PwExtUSMulQAdd8x16", "PwExtUSMulQAdd")
        self.addKeyword("Sub8x16", "SubV")
        self.addKeyword("Sub16x8", "SubV")
        self.addKeyword("Sub32x4", "SubV")
        self.addKeyword("Sub64x2", "SubV")
        self.addKeyword("Sub128x1", "SubV")
        self.addKeyword("QSub8Ux16", "QSubV")
        self.addKeyword("QSub16Ux8", "QSubV")
        self.addKeyword("QSub32Ux4", "QSubV")
        self.addKeyword("QSub8Sx16", "QSubV")
        self.addKeyword("QSub16Sx8", "QSubV")
        self.addKeyword("QSub32Sx4", "QSubV")
        self.addKeyword("QSub64Ux2", "QSubV")
        self.addKeyword("QSub64Sx2", "QSubV")
        self.addKeyword("Mul8x16", "MulV")
        self.addKeyword("Mul16x8", "MulV")
        self.addKeyword("Mul32x4", "MulV")
        self.addKeyword("Mull8Ux8", "MullV")
        self.addKeyword("Mull8Sx8", "MullV")
        self.addKeyword("Mull16Ux4", "MullV")
        self.addKeyword("Mull16Sx4", "MullV")
        self.addKeyword("Mull32Ux2", "MullV")
        self.addKeyword("Mull32Sx2", "MullV")
        self.addKeyword("PolynomialMul8x16", "PolynomialMulV")
        self.addKeyword("PolynomialMull8x8", "PolynomialMullV")
        self.addKeyword("MulHi8Ux16", "MulHiV")
        self.addKeyword("MulHi16Ux8", "MulHiV")
        self.addKeyword("MulHi32Ux4", "MulHiV")
        self.addKeyword("MulHi8Sx16", "MulHiV")
        self.addKeyword("MulHi16Sx8", "MulHiV")
        self.addKeyword("MulHi32Sx4", "MulHiV")
        self.addKeyword("QDMulHi16Sx8", "QDMulHiV")
        self.addKeyword("QDMulHi32Sx4", "QDMulHiV")
        self.addKeyword("QRDMulHi16Sx8", "QRDMulHiV")
        self.addKeyword("QRDMulHi32Sx4", "QRDMulHiV")
        self.addKeyword("MullEven8Ux16", "MullEvenV")
        self.addKeyword("MullEven16Ux8", "MullEvenV")
        self.addKeyword("MullEven32Ux4", "MullEvenV")
        self.addKeyword("MullEven8Sx16", "MullEvenV")
        self.addKeyword("MullEven16Sx8", "MullEvenV")
        self.addKeyword("MullEven32Sx4", "MullEvenV")
        self.addKeyword("PolynomialMulAdd8x16", "PolynomialMulAddV")
        self.addKeyword("PolynomialMulAdd16x8", "PolynomialMulAddV")
        self.addKeyword("PolynomialMulAdd32x4", "PolynomialMulAddV")
        self.addKeyword("PolynomialMulAdd64x2", "PolynomialMulAddV")
        self.addKeyword("Avg8Ux16", "AvgV")
        self.addKeyword("Avg16Ux8", "AvgV")
        self.addKeyword("Avg32Ux4", "AvgV")
        self.addKeyword("Avg64Ux2", "AvgV")
        self.addKeyword("Avg8Sx16", "AvgV")
        self.addKeyword("Avg16Sx8", "AvgV")
        self.addKeyword("Avg32Sx4", "AvgV")
        self.addKeyword("Avg64Sx2", "AvgV")
        self.addKeyword("Max8Sx16", "MaxV")
        self.addKeyword("Max16Sx8", "MaxV")
        self.addKeyword("Max32Sx4", "MaxV")
        self.addKeyword("Max64Sx2", "MaxV")
        self.addKeyword("Max8Ux16", "MaxV")
        self.addKeyword("Max16Ux8", "MaxV")
        self.addKeyword("Max32Ux4", "MaxV")
        self.addKeyword("Max64Ux2", "MaxV")
        self.addKeyword("Min8Sx16", "MinV")
        self.addKeyword("Min16Sx8", "MinV")
        self.addKeyword("Min32Sx4", "MinV")
        self.addKeyword("Min64Sx2", "MinV")
        self.addKeyword("Min8Ux16", "MinV")
        self.addKeyword("Min16Ux8", "MinV")
        self.addKeyword("Min32Ux4", "MinV")
        self.addKeyword("Min64Ux2", "MinV")
        self.addKeyword("CmpEQ8x16", "CmpEQV")
        self.addKeyword("CmpEQ16x8", "CmpEQV")
        self.addKeyword("CmpEQ32x4", "CmpEQV")
        self.addKeyword("CmpEQ64x2", "CmpEQV")
        self.addKeyword("CmpGT8Sx16", "CmpGTV")
        self.addKeyword("CmpGT16Sx8", "CmpGTV")
        self.addKeyword("CmpGT32Sx4", "CmpGTV")
        self.addKeyword("CmpGT64Sx2", "CmpGTV")
        self.addKeyword("CmpGT8Ux16", "CmpGTV")
        self.addKeyword("CmpGT16Ux8", "CmpGTV")
        self.addKeyword("CmpGT32Ux4", "CmpGTV")
        self.addKeyword("CmpGT64Ux2", "CmpGTV")
        self.addKeyword("Cnt8x16", "CntV")
        self.addKeyword("Clz8x16", "ClzV")
        self.addKeyword("Clz16x8", "ClzV")
        self.addKeyword("Clz32x4", "ClzV")
        self.addKeyword("Clz64x2", "ClzV")
        self.addKeyword("Cls8x16", "ClsV")
        self.addKeyword("Cls16x8", "ClsV")
        self.addKeyword("Cls32x4", "ClsV")
        self.addKeyword("Ctz8x16", "CtzV")
        self.addKeyword("Ctz16x8", "CtzV")
        self.addKeyword("Ctz32x4", "CtzV")
        self.addKeyword("Ctz64x2", "CtzV")
        self.addKeyword("ShlV128", "ShlV")
        self.addKeyword("ShrV128", "ShrV")
        self.addKeyword("SarV128", "SarV")
        self.addKeyword("ShlN8x16", "ShlNV")
        self.addKeyword("ShlN16x8", "ShlNV")
        self.addKeyword("ShlN32x4", "ShlNV")
        self.addKeyword("ShlN64x2", "ShlNV")
        self.addKeyword("ShrN8x16", "ShrNV")
        self.addKeyword("ShrN16x8", "ShrNV")
        self.addKeyword("ShrN32x4", "ShrNV")
        self.addKeyword("ShrN64x2", "ShrNV")
        self.addKeyword("SarN8x16", "SarNV")
        self.addKeyword("SarN16x8", "SarNV")
        self.addKeyword("SarN32x4", "SarNV")
        self.addKeyword("SarN64x2", "SarNV")
        self.addKeyword("Shl8x16", "ShlV")
        self.addKeyword("Shl16x8", "ShlV")
        self.addKeyword("Shl32x4", "ShlV")
        self.addKeyword("Shl64x2", "ShlV")
        self.addKeyword("QSal8x16", "QSalV")
        self.addKeyword("QSal16x8", "QSalV")
        self.addKeyword("QSal32x4", "QSalV")
        self.addKeyword("QSal64x2", "QSalV")
        self.addKeyword("QShl8x16", "QShlV")
        self.addKeyword("QShl16x8", "QShlV")
        self.addKeyword("QShl32x4", "QShlV")
        self.addKeyword("QShl64x2", "QShlV")
        self.addKeyword("QShlNsatSS8x16", "QShlNsatV")
        self.addKeyword("QShlNsatSS16x8", "QShlNsatV")
        self.addKeyword("QShlNsatSS32x4", "QShlNsatV")
        self.addKeyword("QShlNsatSS64x2", "QShlNsatV")
        self.addKeyword("QShlNsatUU8x16", "QShlNsatV")
        self.addKeyword("QShlNsatUU16x8", "QShlNsatV")
        self.addKeyword("QShlNsatUU32x4", "QShlNsatV")
        self.addKeyword("QShlNsatUU64x2", "QShlNsatV")
        self.addKeyword("QShlNsatSU8x16", "QShlNsatV")
        self.addKeyword("QShlNsatSU16x8", "QShlNsatV")
        self.addKeyword("QShlNsatSU32x4", "QShlNsatV")
        self.addKeyword("QShlNsatSU64x2", "QShlNsatV")
        self.addKeyword("Shr8x16", "ShrV")
        self.addKeyword("Shr16x8", "ShrV")
        self.addKeyword("Shr32x4", "ShrV")
        self.addKeyword("Shr64x2", "ShrV")
        self.addKeyword("Sar8x16", "SarV")
        self.addKeyword("Sar16x8", "SarV")
        self.addKeyword("Sar32x4", "SarV")
        self.addKeyword("Sar64x2", "SarV")
        self.addKeyword("Sal8x16", "SalV")
        self.addKeyword("Sal16x8", "SalV")
        self.addKeyword("Sal32x4", "SalV")
        self.addKeyword("Sal64x2", "SalV")
        self.addKeyword("Rol8x16", "RolV")
        self.addKeyword("Rol16x8", "RolV")
        self.addKeyword("Rol32x4", "RolV")
        self.addKeyword("Rol64x2", "RolV")
        self.addKeyword("QandUQsh8x16", "QandQshV")
        self.addKeyword("QandUQsh16x8", "QandQshV")
        self.addKeyword("QandUQsh32x4", "QandQshV")
        self.addKeyword("QandUQsh64x2", "QandQshV")
        self.addKeyword("QandSQsh8x16", "QandQshV")
        self.addKeyword("QandSQsh16x8", "QandQshV")
        self.addKeyword("QandSQsh32x4", "QandQshV")
        self.addKeyword("QandSQsh64x2", "QandQshV")
        self.addKeyword("QandUQRsh8x16", "QandQRshV")
        self.addKeyword("QandUQRsh16x8", "QandQRshV")
        self.addKeyword("QandUQRsh32x4", "QandQRshV")
        self.addKeyword("QandUQRsh64x2", "QandQRshV")
        self.addKeyword("QandSQRsh8x16", "QandQRshV")
        self.addKeyword("QandSQRsh16x8", "QandQRshV")
        self.addKeyword("QandSQRsh32x4", "QandQRshV")
        self.addKeyword("QandSQRsh64x2", "QandQRshV")
        self.addKeyword("Sh8Sx16", "ShV")
        self.addKeyword("Sh16Sx8", "ShV")
        self.addKeyword("Sh32Sx4", "ShV")
        self.addKeyword("Sh64Sx2", "ShV")
        self.addKeyword("Sh8Ux16", "ShV")
        self.addKeyword("Sh16Ux8", "ShV")
        self.addKeyword("Sh32Ux4", "ShV")
        self.addKeyword("Sh64Ux2", "ShV")
        self.addKeyword("Rsh8Sx16", "RshV")
        self.addKeyword("Rsh16Sx8", "RshV")
        self.addKeyword("Rsh32Sx4", "RshV")
        self.addKeyword("Rsh64Sx2", "RshV")
        self.addKeyword("Rsh8Ux16", "RshV")
        self.addKeyword("Rsh16Ux8", "RshV")
        self.addKeyword("Rsh32Ux4", "RshV")
        self.addKeyword("Rsh64Ux2", "RshV")
        self.addKeyword("QandQShrNnarrow16Uto8Ux8", "QandQShrNnarrow")
        self.addKeyword("QandQShrNnarrow32Uto16Ux4", "QandQShrNnarrow")
        self.addKeyword("QandQShrNnarrow64Uto32Ux2", "QandQShrNnarrow")
        self.addKeyword("QandQSarNnarrow16Sto8Sx8", "QandQSarNnarrow")
        self.addKeyword("QandQSarNnarrow32Sto16Sx4", "QandQSarNnarrow")
        self.addKeyword("QandQSarNnarrow64Sto32Sx2", "QandQSarNnarrow")
        self.addKeyword("QandQSarNnarrow16Sto8Ux8", "QandQSarNnarrow")
        self.addKeyword("QandQSarNnarrow32Sto16Ux4", "QandQSarNnarrow")
        self.addKeyword("QandQSarNnarrow64Sto32Ux2", "QandQSarNnarrow")
        self.addKeyword("QandQRShrNnarrow16Uto8Ux8", "QandQRShrNnarrow")
        self.addKeyword("QandQRShrNnarrow32Uto16Ux4", "QandQRShrNnarrow")
        self.addKeyword("QandQRShrNnarrow64Uto32Ux2", "QandQRShrNnarrow")
        self.addKeyword("QandQRSarNnarrow16Sto8Sx8", "QandQRSarNnarrow")
        self.addKeyword("QandQRSarNnarrow32Sto16Sx4", "QandQRSarNnarrow")
        self.addKeyword("QandQRSarNnarrow64Sto32Sx2", "QandQRSarNnarrow")
        self.addKeyword("QandQRSarNnarrow16Sto8Ux8", "QandQRSarNnarrow")
        self.addKeyword("QandQRSarNnarrow32Sto16Ux4", "QandQRSarNnarrow")
        self.addKeyword("QandQRSarNnarrow64Sto32Ux2", "QandQRSarNnarrow")
        self.addKeyword("NarrowBin16to8x16", "NarrowBin")
        self.addKeyword("NarrowBin32to16x8", "NarrowBin")
        self.addKeyword("QNarrowBin16Uto8Ux16", "QNarrowBin")
        self.addKeyword("QNarrowBin32Sto16Ux8", "QNarrowBin")
        self.addKeyword("QNarrowBin16Sto8Ux16", "QNarrowBin")
        self.addKeyword("QNarrowBin32Uto16Ux8", "QNarrowBin")
        self.addKeyword("QNarrowBin16Sto8Sx16", "QNarrowBin")
        self.addKeyword("QNarrowBin32Sto16Sx8", "QNarrowBin")
        self.addKeyword("NarrowUn16to8x8", "NarrowUn")
        self.addKeyword("NarrowUn32to16x4", "NarrowUn")
        self.addKeyword("NarrowUn64to32x2", "NarrowUn")
        self.addKeyword("QNarrowUn16Uto8Ux8", "QNarrowUn")
        self.addKeyword("QNarrowUn32Uto16Ux4", "QNarrowUn")
        self.addKeyword("QNarrowUn64Uto32Ux2", "QNarrowUn")
        self.addKeyword("QNarrowUn16Sto8Sx8", "QNarrowUn")
        self.addKeyword("QNarrowUn32Sto16Sx4", "QNarrowUn")
        self.addKeyword("QNarrowUn64Sto32Sx2", "QNarrowUn")
        self.addKeyword("QNarrowUn16Sto8Ux8", "QNarrowUn")
        self.addKeyword("QNarrowUn32Sto16Ux4", "QNarrowUn")
        self.addKeyword("QNarrowUn64Sto32Ux2", "QNarrowUn")
        self.addKeyword("Widen8Uto16x8", "Widen")
        self.addKeyword("Widen16Uto32x4", "Widen")
        self.addKeyword("Widen32Uto64x2", "Widen")
        self.addKeyword("Widen8Sto16x8", "Widen")
        self.addKeyword("Widen16Sto32x4", "Widen")
        self.addKeyword("Widen32Sto64x2", "Widen")
        self.addKeyword("InterleaveHI8x16", "HInterleaveV")
        self.addKeyword("InterleaveHI16x8", "HInterleaveV")
        self.addKeyword("InterleaveHI32x4", "HInterleaveV")
        self.addKeyword("InterleaveHI64x2", "HInterleaveV")
        self.addKeyword("InterleaveLO8x16", "LInterleaveV")
        self.addKeyword("InterleaveLO16x8", "LInterleaveV")
        self.addKeyword("InterleaveLO32x4", "LInterleaveV")
        self.addKeyword("InterleaveLO64x2", "LInterleaveV")
        self.addKeyword("CatOddLanes8x16", "CatOddLanesV")
        self.addKeyword("CatOddLanes16x8", "CatOddLanesV")
        self.addKeyword("CatOddLanes32x4", "CatOddLanesV")
        self.addKeyword("CatEvenLanes8x16", "CatEvenLanesV")
        self.addKeyword("CatEvenLanes16x8", "CatEvenLanesV")
        self.addKeyword("CatEvenLanes32x4", "CatEvenLanesV")
        self.addKeyword("InterleaveOddLanes8x16", "InterleaveOddLanesV")
        self.addKeyword("InterleaveOddLanes16x8", "InterleaveOddLanesV")
        self.addKeyword("InterleaveOddLanes32x4", "InterleaveOddLanesV")
        self.addKeyword("InterleaveEvenLanes8x16", "InterleaveEvenLanesV")
        self.addKeyword("InterleaveEvenLanes16x8", "InterleaveEvenLanesV")
        self.addKeyword("InterleaveEvenLanes32x4", "InterleaveEvenLanesV")
        self.addKeyword("PackOddLanes8x16", "InterleavePackOddLanesV")
        self.addKeyword("PackOddLanes16x8", "InterleavePackOddLanesV")
        self.addKeyword("PackOddLanes32x4", "InterleavePackOddLanesV")
        self.addKeyword("PackEvenLanes8x16", "InterleavePackEvenLanesV")
        self.addKeyword("PackEvenLanes16x8", "InterleavePackEvenLanesV")
        self.addKeyword("PackEvenLanes32x4", "InterleavePackEvenLanesV")
        self.addKeyword("GetElem8x16", "GetElemV")
        self.addKeyword("GetElem16x8", "GetElemV")
        self.addKeyword("GetElem32x4", "GetElemV")
        self.addKeyword("GetElem64x2", "GetElemV")
        self.addKeyword("SetElem8x16", "SetElemV")
        self.addKeyword("SetElem16x8", "SetElemV")
        self.addKeyword("SetElem32x4", "SetElemV")
        self.addKeyword("SetElem64x2", "SetElemV")
        self.addKeyword("GetElem8x8", "GetElemV")
        self.addKeyword("GetElem16x4", "GetElemV")
        self.addKeyword("GetElem32x2", "GetElemV")
        self.addKeyword("SetElem8x8", "SetElemV")
        self.addKeyword("SetElem16x4", "SetElemV")
        self.addKeyword("SetElem32x2", "SetElemV")
        self.addKeyword("Slice64", "Slice")
        self.addKeyword("SliceV128", "SliceV")
        self.addKeyword("Perm8x16", "PermV")
        self.addKeyword("PermOrZero8x16", "PermOrZeroV")
        self.addKeyword("Perm32x4", "PermV")
        self.addKeyword("Perm8x16x2", "PermV")
        self.addKeyword("Reverse8sIn16_x8", "ReverseChunks")
        self.addKeyword("Reverse8sIn32_x4", "ReverseChunks")
        self.addKeyword("Reverse16sIn32_x4", "ReverseChunks")
        self.addKeyword("Reverse8sIn64_x2", "ReverseChunks")
        self.addKeyword("Reverse16sIn64_x2", "ReverseChunks")
        self.addKeyword("Reverse32sIn64_x2", "ReverseChunks")
        self.addKeyword("Reverse1sIn8_x16", "ReverseChunks")
        self.addKeyword("F32ToFixed32Ux4_RZ", "ConvFFixedV")
        self.addKeyword("F32ToFixed32Sx4_RZ", "ConvFFixedV")
        self.addKeyword("Fixed32UToF32x4_RN", "ConvFixedFV")
        self.addKeyword("Fixed32SToF32x4_RN", "ConvFixedFV")
        self.addKeyword("F32ToFixed32Ux2_RZ", "ConvFFixedV")
        self.addKeyword("F32ToFixed32Sx2_RZ", "ConvFFixedV")
        self.addKeyword("Fixed32UToF32x2_RN", "ConvFixedFV")
        self.addKeyword("Fixed32SToF32x2_RN", "ConvFixedFV")
        self.addKeyword("D32toD64", "ExtD")
        self.addKeyword("D64toD32", "TruncD")
        self.addKeyword("AddD64", "AddD")
        self.addKeyword("SubD64", "SubD")
        self.addKeyword("MulD64", "MulD")
        self.addKeyword("DivD64", "DivD")
        self.addKeyword("ShlD64", "ShlD")
        self.addKeyword("ShrD64", "ShrD")
        self.addKeyword("D64toI32S", "TruncDI")
        self.addKeyword("D64toI32U", "TruncDI")
        self.addKeyword("D64toI64S", "ConvDI")
        self.addKeyword("D64toI64U", "ConvDI")
        self.addKeyword("I32StoD64", "ExtID")
        self.addKeyword("I32UtoD64", "ExtID")
        self.addKeyword("I64StoD64", "ConvID")
        self.addKeyword("I64UtoD64", "ConvID")
        self.addKeyword("I32StoD128", "ExtID")
        self.addKeyword("I32UtoD128", "ExtID")
        self.addKeyword("I64StoD128", "ExtID")
        self.addKeyword("I64UtoD128", "ExtID")
        self.addKeyword("D64toD128", "ExtD")
        self.addKeyword("D128toD64", "TruncD")
        self.addKeyword("D128toI32S", "TruncDI")
        self.addKeyword("D128toI32U", "TruncDI")
        self.addKeyword("D128toI64S", "TruncDI")
        self.addKeyword("D128toI64U", "TruncDI")
        self.addKeyword("F32toD32", "ConvFD")
        self.addKeyword("F32toD64", "ExtFD")
        self.addKeyword("F32toD128", "ExtFD")
        self.addKeyword("F64toD32", "TruncFD")
        self.addKeyword("F64toD64", "ConvFD")
        self.addKeyword("F64toD128", "ExtFD")
        self.addKeyword("F128toD32", "TruncFD")
        self.addKeyword("F128toD64", "TruncFD")
        self.addKeyword("F128toD128", "ConvFD")
        self.addKeyword("D32toF32", "ConvDF")
        self.addKeyword("D32toF64", "ExtDF")
        self.addKeyword("D32toF128", "ExtDF")
        self.addKeyword("D64toF32", "TruncDF")
        self.addKeyword("D64toF64", "ConvDF")
        self.addKeyword("D64toF128", "ExtDF")
        self.addKeyword("D128toF32", "TruncDF")
        self.addKeyword("D128toF64", "TruncDF")
        self.addKeyword("D128toF128", "ConvDF")
        self.addKeyword("AddD128", "AddD")
        self.addKeyword("SubD128", "SubD")
        self.addKeyword("MulD128", "MulD")
        self.addKeyword("DivD128", "DivD")
        self.addKeyword("ShlD128", "ShlD")
        self.addKeyword("ShrD128", "ShrD")
        for op in ["Iop_RoundD64toInt", "Iop_RoundD128toInt"]:
            self.addKeyword(op, "RndDI")
        for op in ["Iop_QuantizeD64", "Iop_QuantizeD128"]:
            self.addKeyword(op, "QuantizeD")
        for op in ["Iop_ExtractExpD64", "Iop_ExtractExpD128"]:
            self.addKeyword(op, "ExtractExpD")
        for op in ["Iop_ExtractSigD64", "Iop_ExtractSigD128"]:
            self.addKeyword(op, "ExtractSigD")
        for op in ["Iop_InsertExpD64", "Iop_InsertExpD128"]:
            self.addKeyword(op, "InsertExpD")
        for op in ["Iop_CmpD64", "Iop_CmpD128"]:
            self.addKeyword(op, "CmpD")
        for op in ["Iop_CmpExpD64", "Iop_CmpExpD128"]:
            self.addKeyword(op, "CmpExpD")
        for op in ["Iop_SignificanceRoundD64", "Iop_SignificanceRoundD128"]:
            self.addKeyword(op, "SignificanceRndD")
        self.addKeyword("D64HLtoD128", "HLExtD")
        self.addKeyword("D128HItoD64", "HTruncD")
        self.addKeyword("D128LOtoD64", "LTruncD")
        self.addKeyword("ReinterpI64asD64", "ReinterpID")
        self.addKeyword("ReinterpD64asI64", "ReinterpDI")
        self.addKeyword("V256to64_0", "TruncVI")
        self.addKeyword("V256to64_1", "TruncVI")
        self.addKeyword("V256to64_2", "TruncVI")
        self.addKeyword("V256to64_3", "TruncVI")
        self.addKeyword("64x4toV256", "MergeIV")
        self.addKeyword("V256toV128_0", "TruncVI")
        self.addKeyword("V256toV128_1", "TruncVI")
        self.addKeyword("V128HLtoV256", "HLExtV")
        self.addKeyword("DPBtoBCD", "DPBtoBCD")
        self.addKeyword("BCDtoDPB", "BCDtoDPB")
        self.addKeyword("Add64Fx4", "AddFV")
        self.addKeyword("Sub64Fx4", "SubFV")
        self.addKeyword("Mul64Fx4", "MulFV")
        self.addKeyword("Div64Fx4", "DivFV")
        self.addKeyword("Add32Fx8", "AddFV")
        self.addKeyword("Sub32Fx8", "SubFV")
        self.addKeyword("Mul32Fx8", "MulFV")
        self.addKeyword("Div32Fx8", "DivFV")
        self.addKeyword("I32StoF32x8", "ConvIFV")
        self.addKeyword("F32toI32Sx8", "ConvFIV")
        self.addKeyword("F32toF16x8", "TruncFV")
        self.addKeyword("F16toF32x8", "ExtFV")
        self.addKeyword("AndV256", "AndV")
        self.addKeyword("OrV256", "OrV")
        self.addKeyword("XorV256", "XorV")
        self.addKeyword("NotV256", "NotV")
        self.addKeyword("CmpNEZ64x4", "CmpNEZV")
        self.addKeyword("CmpNEZ32x8", "CmpNEZV")
        self.addKeyword("CmpNEZ16x16", "CmpNEZV")
        self.addKeyword("CmpNEZ8x32", "CmpNEZV")
        self.addKeyword("Add8x32", "AddV")
        self.addKeyword("Add16x16", "AddV")
        self.addKeyword("Add32x8", "AddV")
        self.addKeyword("Add64x4", "AddV")
        self.addKeyword("Sub8x32", "SubV")
        self.addKeyword("Sub16x16", "SubV")
        self.addKeyword("Sub32x8", "SubV")
        self.addKeyword("Sub64x4", "SubV")
        self.addKeyword("QAdd8Ux32", "QAddV")
        self.addKeyword("QAdd16Ux16", "QAddV")
        self.addKeyword("QAdd8Sx32", "QAddV")
        self.addKeyword("QAdd16Sx16", "QAddV")
        self.addKeyword("QSub8Ux32", "QSubV")
        self.addKeyword("QSub16Ux16", "QSubV")
        self.addKeyword("QSub8Sx32", "QSubV")
        self.addKeyword("QSub16Sx16", "QSubV")
        self.addKeyword("Mul16x16", "MulV")
        self.addKeyword("Mul32x8", "MulV")
        self.addKeyword("MulHi16Ux16", "MulHiV")
        self.addKeyword("MulHi16Sx16", "MulHiV")
        self.addKeyword("Avg8Ux32", "AvgV")
        self.addKeyword("Avg16Ux16", "AvgV")
        self.addKeyword("Max8Sx32", "MaxV")
        self.addKeyword("Max16Sx16", "MaxV")
        self.addKeyword("Max32Sx8", "MaxV")
        self.addKeyword("Max8Ux32", "MaxV")
        self.addKeyword("Max16Ux16", "MaxV")
        self.addKeyword("Max32Ux8", "MaxV")
        self.addKeyword("Min8Sx32", "MinV")
        self.addKeyword("Min16Sx16", "MinV")
        self.addKeyword("Min32Sx8", "MinV")
        self.addKeyword("Min8Ux32", "MinV")
        self.addKeyword("Min16Ux16", "MinV")
        self.addKeyword("Min32Ux8", "MinV")
        self.addKeyword("CmpEQ8x32", "CmpEQV")
        self.addKeyword("CmpEQ16x16", "CmpEQV")
        self.addKeyword("CmpEQ32x8", "CmpEQV")
        self.addKeyword("CmpEQ64x4", "CmpEQV")
        self.addKeyword("CmpGT8Sx32", "CmpGTV")
        self.addKeyword("CmpGT16Sx16", "CmpGTV")
        self.addKeyword("CmpGT32Sx8", "CmpGTV")
        self.addKeyword("CmpGT64Sx4", "CmpGTV")
        self.addKeyword("ShlN16x16", "ShlNV")
        self.addKeyword("ShlN32x8", "ShlNV")
        self.addKeyword("ShlN64x4", "ShlNV")
        self.addKeyword("ShrN16x16", "ShrNV")
        self.addKeyword("ShrN32x8", "ShrNV")
        self.addKeyword("ShrN64x4", "ShrNV")
        self.addKeyword("SarN16x16", "SarNV")
        self.addKeyword("SarN32x8", "SarNV")
        self.addKeyword("Perm32x8", "PermV")
        self.addKeyword("CipherV128", "CipherV")
        self.addKeyword("CipherLV128", "CipherLV")
        self.addKeyword("NCipherV128", "NCipherV")
        self.addKeyword("NCipherLV128", "NCipherLV")
        self.addKeyword("CipherSV128", "CipherSV")
        for op in ["SHA256", "SHA512"]:
            self.addKeyword(op, "SHA")
        self.addKeyword("BCDAdd", "BCDAdd")
        self.addKeyword("BCDSub", "BCDSub")
        self.addKeyword("I128StoBCD128", "bcdcfsq.")
        self.addKeyword("BCD128toI128S", "bcdctsq.")
        self.addKeyword("Rotx32", "bitswap")
        self.addKeyword("Rotx64", "dbitswap")
        self.addKeyword("PwBitMtxXpose64x2", "BitMatrixTranspose")
        self.addKeyword("Function", "function")
        self.addKeyword("ILGop_16Uto32", "Ext")
        self.addKeyword("ILGop_16Sto32", "Ext")
        self.addKeyword("ILGop_8Uto32", "Ext")
        self.addKeyword("ILGop_8Sto32", "Ext")
        self.addKeyword(
            "r1234", "r1234"
        )  # dummy register: workaround for a bug
        self.addKeyword(
            "remove", ""
        )  # dummy instruction: to remove tokens from the output
        self.addKeyword("nan", "CONSTANT")  # to-do: handle NaNs separately

    def addKeyword(self, op, keyword):
        self.keywords[op.lower()] = keyword.lower()

    def getKeyword(self, op):
        return self.keywords[op]
